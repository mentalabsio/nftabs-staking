/** @jsxImportSource theme-ui */
import Head from "next/head";

import { Button, Flex, Heading, Text } from "@theme-ui/components";
import { useState } from "react";
import { web3 } from "@project-serum/anchor";

import Header from "@/components/Header/Header";
import { NFTGallery } from "@/components/NFTGallery/NFTGallery";
import CollectionItem from "@/components/NFTGallery/CollectionItem";
import useWalletNFTs, { NFT } from "@/hooks/useWalletNFTs";
import { Tab, TabList, TabPanel, Tabs } from "react-tabs";
import NFTSelectInput from "@/components/NFTSelectInput/NFTSelectInput";
import { LoadingIcon } from "@/components/icons/LoadingIcon";
import useStaking from "@/hooks/useStaking";

export default function Home() {
  const { initFarmer, stakeAll } = useStaking();
  const { walletNFTs, fetchNFTs } = useWalletNFTs([
    "2foGcTHZ2C9c5xQrBopgLyNxQ33rdSxwDXqHJbv34Fvs",
  ]);
  const { walletNFTs: associatedNFTs, fetchNFTs: fetchAssociatedNFTs } =
    useWalletNFTs(["62vz2oMLFf6k4DcX23tA6hR4ixDGUVxqk4gJf7iCGiEx"]);
  const [isAddingAssociated, setIsAddingAssociated] = useState<false | string>(
    false
  );
  const [selectedWalletItems, setSelectedWalletItems] = useState<NFT[]>([]);

  const handleAssociatedFormSubmit = async (e) => {
    e.preventDefault();

    const data = new FormData(e.currentTarget);

    const mint = data.get("mint");
    const mainMint = data.get("main_mint");

    // await stakeAssociated(
    //   new web3.PublicKey(mint),
    //   new web3.PublicKey(mainMint)
    // );
    // await fetchAssociatedNFTs();
    // await fetchProgress();
  };

  /**
   * Handles selected items.
   */
  const handleWalletItemClick = (item: NFT) => {
    setSelectedWalletItems((prev) => {
      const exists = prev.find(
        (NFT) => NFT.onchainMetadata.mint === item.onchainMetadata.mint
      );

      /** Remove if exists */
      if (exists) {
        return prev.filter(
          (NFT) => NFT.onchainMetadata.mint !== item.onchainMetadata.mint
        );
      }

      return prev?.concat(item);
    });
  };

  return (
    <>
      <Head>
        <title>Staking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <div
        sx={{
          "&:before": {
            content: "''",
            backgroundRepeat: "repeat",
            backgroundAttachment: "fixed",
            minHeight: "100vh",
            opacity: 0.4,
            zIndex: 0,
            position: "fixed",
            left: 0,
            top: 0,
            width: "100%",
            height: "100%",
            backgroundPosition: "50% 0",
            pointerEvents: "none",
          },
        }}
      ></div>

      <main
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          alignSelf: "stretch",
          margin: "0 auto",
          marginTop: "4rem",
          maxWidth: "64rem",
          position: "relative",
          padding: "0 1.6rem",
        }}
      >
        <Heading mb=".8rem" variant="heading1">
          Staking
        </Heading>
        <Text>Stake now</Text>
        <Button onClick={initFarmer}>Init farmer</Button>

        <Flex
          my="3.2rem"
          sx={{
            flexDirection: "column",
            alignItems: "center",
            gap: "1.6rem",
          }}
        >
          <Flex
            sx={{
              gap: "1.6rem",
            }}
          >
            {/* {progress?.totalAccrued?.toNumber() ? (
              <Text>
                Accrued rewards:{" "}
                {progress?.totalAccrued?.toNumber() / 1000000000}
              </Text>
            ) : null} */}

            {/* <Text>
              Rate: {progress?.totalRewardRate?.toNumber() / 1000000000}
            </Text> */}
          </Flex>
          <Button>Claim all</Button>

          <Flex
            sx={{
              alignItems: "center",
              gap: ".8rem",
              margin: ".8rem 0",
            }}
          >
            {/* {feedbackStatus ? (
              <>
                {feedbackStatus.indexOf("Success") === -1 ? (
                  <LoadingIcon size="1.6rem" />
                ) : null}
                {"  "}{" "}
                <Text
                  variant="small"
                  sx={{
                    color:
                      feedbackStatus.indexOf("Success") !== -1
                        ? "success"
                        : "text",
                  }}
                >
                  {feedbackStatus}
                </Text>
              </>
            ) : (
              ""
            )} */}
            &nbsp;
          </Flex>
        </Flex>

        <Flex
          my="3.2rem"
          sx={{
            flexDirection: "column",
            gap: "1.6rem",
            alignSelf: "stretch",
          }}
        >
          <Tabs
            sx={{
              margin: "3.2rem 0",
              alignSelf: "stretch",
              minHeight: "48rem",
            }}
          >
            <TabList>
              <Tab>Your wallet</Tab>
              <Tab>Your vault</Tab>
            </TabList>

            <TabPanel>
              <NFTGallery NFTs={walletNFTs}>
                <>
                  {walletNFTs?.map((item) => {
                    const isSelected = selectedWalletItems.find(
                      (NFT) =>
                        NFT.onchainMetadata.mint === item.onchainMetadata.mint
                    );

                    return (
                      <Flex
                        sx={{
                          flexDirection: "column",
                          alignItems: "center",
                          gap: "1.6rem",
                        }}
                      >
                        <CollectionItem
                          key={item.onchainMetadata.mint}
                          item={item}
                          onClick={handleWalletItemClick}
                          sx={{
                            maxWidth: "16rem",
                            "> img": {
                              border: "3px solid transparent",
                              borderColor: isSelected
                                ? "primary"
                                : "transparent",
                            },
                          }}
                        />
                      </Flex>
                    );
                  })}
                </>
              </NFTGallery>
              <Button
                sx={{
                  margin: "3.2rem auto",
                }}
                onClick={async (e) => {
                  const allMints = selectedWalletItems.map((item) => item.mint);
                  await stakeAll(allMints);
                  await fetchNFTs();
                  // await fetchProgress();
                }}
                disabled={!selectedWalletItems.length}
              >
                Stake selected
              </Button>
            </TabPanel>

            <TabPanel>
              {/* <Button
                onClick={async () => {
                  await stakeAssociated()
                  await fetchNFTs()
                  await fetchProgress()
                }}
              >
                stake associated
              </Button>
              <Button
                onClick={async () => {
                  await unstakeAssociated()
                  await fetchNFTs()
                  await fetchProgress()
                }}
              >
                unstake associated
              </Button> */}

              <Flex
                sx={{
                  flexDirection: "column",
                  gap: "3.2rem",
                }}
              >
                {/* {progress &&
                  progress.stakes.map((stake) => {
                    const isAdding =
                      isAddingAssociated &&
                      isAddingAssociated === stake.mainNft.mint.toString();

                    return (
                      <Flex
                        key={stake.mainNft.mint?.toString()}
                        sx={{
                          alignItems: "center",
                          gap: "1.6rem",
                          background: "background",
                          padding: "1.6rem 3.2rem",
                          borderRadius: ".4rem",
                          flexDirection: "column",
                          "@media (min-width:768px)": {
                            flexDirection: "row",
                          },
                        }}
                      >
                        <Flex
                          sx={{
                            flexDirection: "column",
                            alignItems: "center",
                            gap: "1.6rem",
                            "@media (min-width:768px)": {
                              marginRight: "3.2rem",
                            },
                          }}
                        >
                          <CollectionItem item={stake.mainNft} />
                          <Flex
                            sx={{
                              gap: "1.6rem",
                              alignItems: "center",
                            }}
                          >
                            <Button
                              variant="resetted"
                              onClick={async () => {
                                await claim(stake.mainNft.mint);
                                await fetchNFTs();
                                await fetchProgress();
                              }}
                            >
                              Claim
                            </Button>
                            <Button
                              variant="secondary"
                              onClick={async () => {
                                await unstake(stake.mainNft.mint);
                                await fetchNFTs();
                                await fetchProgress();
                              }}
                            >
                              Unstake
                            </Button>
                          </Flex>
                        </Flex>

                        <Flex
                          sx={{
                            flexDirection: "column",
                            alignItems: "center",
                            gap: "1.6rem",
                          }}
                        >
                          <Flex
                            sx={{
                              gap: "1.6rem",
                            }}
                          >
                            {stake.objects.map((object) =>
                              object ? (
                                <Flex
                                  key={object.mint.toString()}
                                  sx={{
                                    flexDirection: "column",
                                    alignItems: "center",
                                    gap: "1.6rem",
                                  }}
                                >
                                  <CollectionItem
                                    item={object.metadata}
                                    sx={{
                                      maxWidth: "8rem",
                                    }}
                                  />
                                  <Button
                                    onClick={async () => {
                                      await unstakeAssociated(
                                        object.mint,
                                        stake.mainNft.mint
                                      );
                                      await fetchProgress();
                                      await fetchAssociatedNFTs();
                                    }}
                                  >
                                    Withdraw
                                  </Button>
                                </Flex>
                              ) : null
                            )}
                          </Flex>
                        </Flex>

                        <Flex
                          sx={{
                            flexDirection: "column",
                            alignItems: "center",
                            gap: "1.6rem",

                            "@media (min-width:768px)": {
                              marginLeft: "3.2rem",
                            },
                          }}
                        >
                          <Button
                            variant="resetted"
                            onClick={() =>
                              setIsAddingAssociated((prev) =>
                                prev ? false : stake.mainNft.mint.toString()
                              )
                            }
                          >
                            {isAdding ? null : "+"} Add
                            {isAdding ? "ing" : null} a Shiny Thing
                          </Button>

                          {isAdding ? (
                            <form
                              onSubmit={handleAssociatedFormSubmit}
                              sx={{
                                display: "flex",
                                flexDirection: "column",
                                alignItems: "center",
                                gap: "1.6rem",
                              }}
                            >
                              <Flex
                                sx={{
                                  gap: "1.6rem",
                                }}
                              >
                                <input
                                  type="hidden"
                                  name="main_mint"
                                  value={stake.mainNft.mint.toString()}
                                />
                                <NFTSelectInput
                                  name="mint"
                                  NFTs={associatedNFTs}
                                  label="Select a Shiny Thing"
                                />
                              </Flex>
                              <Flex
                                sx={{
                                  gap: "1.6rem",
                                }}
                              >
                                <Button type="submit">Add Thing</Button>
                              </Flex>
                            </form>
                          ) : null}
                        </Flex>
                      </Flex>
                    );
                  })} */}
              </Flex>
            </TabPanel>
          </Tabs>

          {/* <Flex
            sx={{
              flexDirection: "column",
              gap: ".8rem",
            }}
          >
            <Heading variant="heading3">NFT Selector:</Heading>
            <NFTSelectInput name="nft" NFTs={walletNFTs} />
          </Flex> */}
        </Flex>
      </main>

      <footer
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          margin: "4rem 0",
          position: "relative",
        }}
      >
        Powered by{" "}
        <a
          href="https://twitter.com/magicshards"
          target="_blank"
          rel="noopener noreferrer"
          sx={{
            display: "flex",
            alignItems: "center",
          }}
        >
          <Text
            variant="small"
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            <img
              sx={{
                height: "32px",
              }}
              src="/magicshards320px.gif"
              alt="Magic Shards"
              height={32}
            />
            MagicShards
          </Text>
        </a>
      </footer>
    </>
  );
}
