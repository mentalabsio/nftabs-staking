/** @jsxImportSource theme-ui */
import Head from "next/head";

import { Button, Flex, Heading, Text } from "@theme-ui/components";
import { FormEvent, useState } from "react";
import { web3 } from "@project-serum/anchor";

import Header from "@/components/Header/Header";
import { NFTGallery } from "@/components/NFTGallery/NFTGallery";
import CollectionItem from "@/components/NFTGallery/CollectionItem";
import useWalletNFTs, { NFT } from "@/hooks/useWalletNFTs";
import { Tab, TabList, TabPanel, Tabs } from "react-tabs";
import NFTSelectInput from "@/components/NFTSelectInput/NFTSelectInput";
import { LoadingIcon } from "@/components/icons/LoadingIcon";
import useStaking, { StakeReceiptWithMetadata } from "@/hooks/useStaking";

export default function Home() {
  const {
    farmerAccount,
    initFarmer,
    stakeAll,
    claim,
    stakeReceipts,
    feedbackStatus,
    unstake,
    fetchReceipts,
    buffPair,
    debuffPair,
    stakeFungibleTokens,
  } = useStaking();
  const { walletNFTs, fetchNFTs } = useWalletNFTs([
    "2foGcTHZ2C9c5xQrBopgLyNxQ33rdSxwDXqHJbv34Fvs",
  ]);

  const { walletNFTs: bufferNFTs, fetchNFTs: fetchBufferNFTs } = useWalletNFTs([
    "62vz2oMLFf6k4DcX23tA6hR4ixDGUVxqk4gJf7iCGiEx",
  ]);

  const [selectedWalletItems, setSelectedWalletItems] = useState<NFT[]>([]);
  const [isBuffFormOpen, setIsBuffFormOpen] = useState(false);

  /**
   * Handles selected items.
   */
  const handleWalletItemClick = (item: NFT) => {
    setSelectedWalletItems((prev) => {
      const exists = prev.find(
        (NFT) => NFT.onchainMetadata.mint === item.onchainMetadata.mint
      );

      /** Remove if exists */
      if (exists) {
        return prev.filter(
          (NFT) => NFT.onchainMetadata.mint !== item.onchainMetadata.mint
        );
      }

      return prev?.concat(item);
    });
  };

  const handleBuffFormSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const data = new FormData(e.currentTarget);

    const toBuff = data.getAll("to_buff");
    const buffer = data.get("buffer_mint");

    await buffPair(
      new web3.PublicKey(toBuff[0]),
      new web3.PublicKey(toBuff[1]),
      new web3.PublicKey(buffer)
    );

    await fetchNFTs();
    await fetchReceipts();
    await fetchBufferNFTs();
  };

  const reducedReceipts: {
    buffed: {
      [key: string]: StakeReceiptWithMetadata[];
    };
    notBuffed: StakeReceiptWithMetadata[];
  } = stakeReceipts?.reduce(
    (acc, curr) => {
      const buffer = curr.buff;

      if (!buffer) {
        acc.notBuffed.push(curr);

        return acc;
      }

      const currentArray = acc.buffed[buffer?.key.toString()];

      if (currentArray) {
        currentArray.push(curr);
      } else {
        acc.buffed[buffer.key.toString()] = [curr];
      }

      return acc;
    },
    { buffed: {}, notBuffed: [] }
  );

  return (
    <>
      <Head>
        <title>Staking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <div
        sx={{
          "&:before": {
            content: "''",
            backgroundRepeat: "repeat",
            backgroundAttachment: "fixed",
            minHeight: "100vh",
            opacity: 0.4,
            zIndex: 0,
            position: "fixed",
            left: 0,
            top: 0,
            width: "100%",
            height: "100%",
            backgroundPosition: "50% 0",
            pointerEvents: "none",
          },
        }}
      ></div>

      <main
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          alignSelf: "stretch",
          margin: "0 auto",
          marginTop: "4rem",
          maxWidth: "64rem",
          position: "relative",
          padding: "0 1.6rem",
          paddingBottom: "12.8rem",
        }}
      >
        <Text
          sx={{
            position: "relative",
            marginBottom: "3.2rem",
            fontSize: "3.2rem",
          }}
        >
          Staking
        </Text>
        {farmerAccount === false ? (
          <Button mt="3.2rem" onClick={initFarmer}>
            Init farmer
          </Button>
        ) : null}

        {farmerAccount ? (
          <>
            <Flex
              my="3.2rem"
              sx={{
                flexDirection: "column",
                alignItems: "center",
                gap: "1.6rem",
              }}
            >
              <Flex
                sx={{
                  gap: "1.6rem",
                }}
              ></Flex>
              <Button onClick={claim}>Claim rewards</Button>

              <Flex
                sx={{
                  alignItems: "center",
                  gap: ".8rem",
                  margin: ".8rem 0",
                }}
              >
                {feedbackStatus ? (
                  <>
                    {feedbackStatus.indexOf("Success") === -1 ? (
                      <LoadingIcon size="1.6rem" />
                    ) : null}
                    {"  "}{" "}
                    <Text
                      variant="small"
                      sx={{
                        color:
                          feedbackStatus.indexOf("Success") !== -1
                            ? "success"
                            : "text",
                      }}
                    >
                      {feedbackStatus}
                    </Text>
                  </>
                ) : (
                  ""
                )}
                &nbsp;
              </Flex>
            </Flex>

            <Flex
              my="3.2rem"
              sx={{
                flexDirection: "column",
                gap: "1.6rem",
                alignSelf: "stretch",
              }}
            >
              <Tabs
                sx={{
                  margin: "3.2rem 0",
                  alignSelf: "stretch",
                  minHeight: "48rem",
                }}
              >
                <TabList>
                  <Tab>Your wallet</Tab>
                  <Tab>Your vault</Tab>
                </TabList>

                <TabPanel>
                  <NFTGallery NFTs={walletNFTs}>
                    <>
                      {walletNFTs?.map((item) => {
                        const isSelected = selectedWalletItems.find(
                          (NFT) =>
                            NFT.onchainMetadata.mint ===
                            item.onchainMetadata.mint
                        );

                        return (
                          <Flex
                            sx={{
                              flexDirection: "column",
                              alignItems: "center",
                              gap: "1.6rem",
                            }}
                          >
                            <CollectionItem
                              key={item.onchainMetadata.mint}
                              item={item}
                              onClick={handleWalletItemClick}
                              sx={{
                                maxWidth: "16rem",
                                "> img": {
                                  border: "3px solid transparent",
                                  borderColor: isSelected
                                    ? "primary"
                                    : "transparent",
                                },
                              }}
                            />
                          </Flex>
                        );
                      })}
                    </>
                  </NFTGallery>
                  <Button
                    sx={{
                      margin: "3.2rem auto",
                    }}
                    onClick={async (e) => {
                      const allMints = selectedWalletItems.map(
                        (item) => item.mint
                      );
                      await stakeAll(allMints);
                      await fetchNFTs();
                      await fetchReceipts();
                      setSelectedWalletItems([]);
                    }}
                    disabled={!selectedWalletItems.length}
                  >
                    Stake selected
                  </Button>
                </TabPanel>

                <TabPanel>
                  <Flex
                    sx={{
                      flexDirection: "column",
                      gap: "3.2rem",
                    }}
                  >
                    <>
                      <div
                        sx={{
                          display: "grid",
                          gridTemplateColumns: "1fr 1fr",
                          gap: "1.6rem",
                          alignItems: "center",

                          "@media (min-width: 768px)": {
                            gridTemplateColumns: "1fr 1fr 1fr 1fr",
                          },
                        }}
                      >
                        {reducedReceipts
                          ? reducedReceipts.notBuffed.map((receipt) => (
                              <CollectionItem
                                item={receipt.metadata}
                                onClick={async () => {
                                  await unstake(receipt.mint);
                                  await fetchNFTs();
                                  await fetchReceipts();
                                }}
                                sx={{
                                  border: "1px solid",
                                  borderColor: receipt.buff
                                    ? "yellow"
                                    : "transparent",
                                }}
                              />
                            ))
                          : null}
                      </div>
                      {reducedReceipts
                        ? Object.entries(reducedReceipts.buffed).map(
                            ([key, value]) => {
                              return (
                                <Flex>
                                  <CollectionItem
                                    item={value[0].metadata}
                                    onClick={async () => {
                                      await unstake(value[0].mint);
                                      await fetchNFTs();
                                      await fetchReceipts();
                                    }}
                                    sx={{
                                      border: "1px solid",
                                      borderColor: value[0].buff
                                        ? "yellow"
                                        : "transparent",
                                    }}
                                  />

                                  <CollectionItem
                                    item={value[1].metadata}
                                    onClick={async () => {
                                      await unstake(value[1].mint);
                                      await fetchNFTs();
                                      await fetchReceipts();
                                    }}
                                    sx={{
                                      border: "1px solid",
                                      borderColor: value[1].buff
                                        ? "yellow"
                                        : "transparent",
                                    }}
                                  />
                                  <Button
                                    variant="secondary"
                                    onClick={async () => {
                                      await debuffPair(
                                        value[0].mint,
                                        value[1].mint,
                                        new web3.PublicKey(key)
                                      );
                                      await fetchNFTs();
                                      await fetchReceipts();
                                      await fetchBufferNFTs();
                                    }}
                                  >
                                    Debuff pair
                                  </Button>
                                </Flex>
                              );
                            }
                          )
                        : null}
                    </>
                    <Button
                      sx={{
                        alignSelf: "center",
                        margin: "3.2rem 0",
                      }}
                      variant="secondary"
                      onClick={() => setIsBuffFormOpen((prev) => !prev)}
                    >
                      Buff a pair!
                    </Button>
                    {isBuffFormOpen ? (
                      <form
                        sx={{
                          display: "flex",
                          flexDirection: "column",
                          gap: "1.6rem",
                          alignItems: "center",
                        }}
                        onSubmit={handleBuffFormSubmit}
                      >
                        Select NFT A:
                        <NFTSelectInput
                          NFTs={stakeReceipts?.map(
                            (receipt) => receipt.metadata
                          )}
                          name="to_buff"
                        />
                        Select NFT A:
                        <NFTSelectInput
                          NFTs={stakeReceipts?.map(
                            (receipt) => receipt.metadata
                          )}
                          name="to_buff"
                        />
                        Select Sunshine:
                        <NFTSelectInput NFTs={bufferNFTs} name="buffer_mint" />
                        <Button type="submit">Buff an NFT pair!</Button>
                      </form>
                    ) : null}
                  </Flex>
                </TabPanel>
              </Tabs>
            </Flex>

            <Flex
              my="3.2rem"
              sx={{
                flexDirection: "column",
                alignItems: "center",
                gap: "1.6rem",
              }}
            >
              Stake Fungible
              <Button onClick={stakeFungibleTokens}>Stake fungible</Button>
            </Flex>
          </>
        ) : null}
      </main>

      <footer
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          margin: "4rem 0",
          position: "relative",
        }}
      >
        Powered by{" "}
        <a
          href="https://twitter.com/magicshards"
          target="_blank"
          rel="noopener noreferrer"
          sx={{
            display: "flex",
            alignItems: "center",
          }}
        >
          <Text
            variant="small"
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            <img
              sx={{
                height: "32px",
              }}
              src="/magicshards320px.gif"
              alt="Magic Shards"
              height={32}
            />
            MagicShards
          </Text>
        </a>
      </footer>
    </>
  );
}
